{"ast":null,"code":"import _regeneratorRuntime from\"/Users/michalis/Documents/GitHub/michalis-theodosiou.github.io/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/michalis/Documents/GitHub/michalis-theodosiou.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{fetchCount}from'./counterAPI';import{trackIncrement}from'../../analytics/events';var initialState={value:0,status:'idle'};// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport var incrementAsync=createAsyncThunk('counter/fetchCount',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(amount){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetchCount(amount);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var counterSlice=createSlice({name:'counter',initialState:initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\ntrackIncrement(state.value+1);state.value+=1;},decrement:function decrement(state){state.value-=1;},// Use the PayloadAction type to declare the contents of `action.payload`\nincrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:function extraReducers(builder){builder.addCase(incrementAsync.pending,function(state){state.status='loading';}).addCase(incrementAsync.fulfilled,function(state,action){state.status='idle';state.value+=action.payload;}).addCase(incrementAsync.rejected,function(state){state.status='failed';});}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport{increment,decrement,incrementByAmount};export var selectCount=function selectCount(state){return state.counter.value;};// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport var incrementIfOdd=function incrementIfOdd(amount){return function(dispatch,getState){var currentValue=selectCount(getState());if(currentValue%2===1){dispatch(incrementByAmount(amount));}};};export default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","trackIncrement","initialState","value","status","incrementAsync","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","amount","response","wrap","_callee$","_context","prev","next","sent","abrupt","data","stop","_x","apply","arguments","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","_counterSlice$actions","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/michalis/Documents/GitHub/michalis-theodosiou.github.io/src/features/counter/counterSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\nimport { trackIncrement } from '../../analytics/events';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      trackIncrement(state.value + 1)\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      })\n      .addCase(incrementAsync.rejected, (state) => {\n        state.status = 'failed';\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount));\n    }\n  };\n\nexport default counterSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}